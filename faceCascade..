import pyautogui as pag
import cv2
# from arduinoProg import ledOff, ledOn, led2On, led2Off

# Load the pre-trained face cascade XML file
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
rubic_cascade = cv2.CascadeClassifier('harrcascade_rubik.xml')

# functions
def screenshot():
    pag.press('printscreen')


# Create a video capture object
cap = cv2.VideoCapture(0)  # 0 represents the default camera

while True:
    # Read the frame from the video capture
    ret, frame = cap.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Perform face detection
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    rubic = rubic_cascade.detectMultiScale(gray, 1.1, 5)    
    
    # Check if any face is detected

    if len(faces) > 0 or len(rubic)> 0:
        print("Face detected with rubic")
        # ledOn()
    elif len(faces) >= 2:
        print("Too many faces detected")
        # ledOn()
        # led2On()
    else:
        print("No face detected")
        # screenshot()
        # ledOff()
        # led2Off()

    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
    
    for (x, y, w, h) in rubic:
        cv2.rectangle(frame, (x,y),(x+w,y+h), (0, 0, 255),2)

    # Display the frame
    cv2.imshow('Face Detection', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) == ord('q'):
        break

# Release the video capture object and close the windows
cap.release()
cv2.destroyAllWindows()
